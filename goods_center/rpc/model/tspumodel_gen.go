// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tSpuFieldNames          = builder.RawFieldNames(&TSpu{})
	tSpuRows                = strings.Join(tSpuFieldNames, ",")
	tSpuRowsExpectAutoSet   = strings.Join(stringx.Remove(tSpuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tSpuRowsWithPlaceHolder = strings.Join(stringx.Remove(tSpuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	tSpuModel interface {
		Insert(ctx context.Context, data *TSpu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TSpu, error)
		FindOneByAppIdSpuId(ctx context.Context, appId string, spuId string) (*TSpu, error)
		Update(ctx context.Context, data *TSpu) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTSpuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TSpu struct {
		Id              int64     `db:"id"`
		AppId           string    `db:"app_id"`            // 店铺id
		SpuId           string    `db:"spu_id"`            // 商品id
		SpuType         string    `db:"spu_type"`          // 商品类型(关联t_spu_type)
		GoodsCategoryId string    `db:"goods_category_id"` // 商品分类id
		GoodsName       string    `db:"goods_name"`        // 商品名称
		GoodsImg        string    `db:"goods_img"`         // 商品封面图（默认封面图）
		Price           int64     `db:"price"`             // 商品最低价
		PriceLine       int64     `db:"price_line"`        // 划线价
		GoodsTag        string    `db:"goods_tag"`         // 商品标签
		SaleStatus      int64     `db:"sale_status"`       // 上架状态： 0下架 1上架 2（定时上架还未上架阶段）待上架 4强制下架 5封禁
		SaleAt          time.Time `db:"sale_at"`           // 实际上架的时间
		IsDisplay       int64     `db:"is_display"`        // 是否显示：0否(隐藏状态) 1是(显示状态)
		LimitPurchase   int64     `db:"limit_purchase"`    // 限购数量
		StockDeductMode int64     `db:"stock_deduct_mode"` // 扣库存方式：0付款减库存 1拍下减库存
		IsDeleted       int64     `db:"is_deleted"`        // 0正常 1已删除
		CreatedAt       time.Time `db:"created_at"`        // 创建时间
		UpdatedAt       time.Time `db:"updated_at"`        // 更新时间，有修改自动更新
	}
)

func newTSpuModel(conn sqlx.SqlConn) *defaultTSpuModel {
	return &defaultTSpuModel{
		conn:  conn,
		table: "`t_spu`",
	}
}

func (m *defaultTSpuModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTSpuModel) FindOne(ctx context.Context, id int64) (*TSpu, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tSpuRows, m.table)
	var resp TSpu
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSpuModel) Insert(ctx context.Context, data *TSpu) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tSpuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AppId, data.SpuId, data.SpuType, data.GoodsCategoryId, data.GoodsName, data.GoodsImg, data.Price, data.PriceLine, data.GoodsTag, data.SaleStatus, data.SaleAt, data.IsDisplay, data.LimitPurchase, data.StockDeductMode, data.IsDeleted, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultTSpuModel) Update(ctx context.Context, newData *TSpu) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tSpuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AppId, newData.SpuId, newData.SpuType, newData.GoodsCategoryId, newData.GoodsName, newData.GoodsImg, newData.Price, newData.PriceLine, newData.GoodsTag, newData.SaleStatus, newData.SaleAt, newData.IsDisplay, newData.LimitPurchase, newData.StockDeductMode, newData.IsDeleted, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	return err
}

func (m *defaultTSpuModel) tableName() string {
	return m.table
}
